import mongoose from 'mongoose';
import Notification from '../models/notificationModel.js';
import Bill from '../models/billModel.js';
import Leave from '../models/leaveModel.js';
import Repair from '../models/repairModel.js';
import UserReadStatus from '../models/userReadStatusModel.js';
import Evaluation from '../models/Evaluation.js';
import { emitToShop } from '../socket.js';

// Get user notifications
export const getUserNotifications = async (req, res) => {
  try {
    console.log('üîç Fetching notifications for shopId:', req.user.shopId);
    console.log('üîç User object:', req.user);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    
    console.log('üìÖ Filtering notifications from:', oneMonthAgo.toISOString());
    console.log('üìÖ Current date:', new Date().toISOString());
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (!req.user) {
      console.error('‚ùå Missing user information:', req.user);
      return res.status(400).json({
        success: false,
        error: 'User information is missing'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    if (!mongoose.connection.readyState) {
      console.error('‚ùå Database connection not available');
      return res.status(500).json({
        success: false,
        error: 'Database connection not available'
      });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å database ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    let shopId, userId;
    
    if (req.user.role === 'admin') {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      console.log('üîç Admin access - fetching all notifications');
      shopId = 'admin'; // admin ‡πÉ‡∏ä‡πâ 'admin' ‡πÄ‡∏õ‡πá‡∏ô shopId
      userId = req.user.username || 'admin';
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      if (!req.user.shopId) {
        console.error('‚ùå Missing shopId for user:', req.user);
        return res.status(400).json({
          success: false,
          error: 'Shop information is missing'
        });
      }
      shopId = req.user.shopId;
      userId = req.user.userId || req.user.shopId; // fallback
    }
    const notifications = [];

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    console.log('üîç Searching for user read status for userId:', userId);
    console.log('üîç shopId:', shopId);
    console.log('üîç userId type:', typeof userId);
    console.log('üîç shopId type:', typeof shopId);
    
    let userReadStatus = await UserReadStatus.findOne({ userId });
    if (!userReadStatus) {
      console.log('üìù Creating new user read status for userId:', userId);
      const userReadStatusData = { 
        userId, 
        shopId: shopId
      };
      console.log('üìù UserReadStatus data:', userReadStatusData);
      
      userReadStatus = new UserReadStatus(userReadStatusData);
      await userReadStatus.save();
      console.log('‚úÖ User read status created successfully');
    } else {
      console.log('‚úÖ Found existing user read status');
    }

    console.log('üîç Searching for bills with shopId:', shopId);
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bill ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏°‡∏µ shopId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    let latestBills = [];
    if (shopId && shopId !== 'admin') {
      const billQuery = { 
        shopId,
        updatedAt: { $gte: oneMonthAgo } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      };
      latestBills = await Bill.find(billQuery)
        .sort({ updatedAt: -1 })
        .limit(10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    }
    
    console.log('üìã Found bills:', latestBills.length);
    console.log('üìã Bill IDs:', latestBills.map(b => b._id));
    for (const bill of latestBills) {
      console.log('üìã Bill:', {
        id: bill._id,
        status: bill.status,
        billType: bill.billType,
        amount: bill.amount,
        updatedAt: bill.updatedAt
      });
      if (bill.status && bill.status !== '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ bill ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á shopId ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (bill.shopId && bill.shopId.toString() === shopId.toString()) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const isRead = userReadStatus.readBills.includes(bill._id.toString());
          
          notifications.push({
            _id: `bill_${bill._id}`,
            type: 'bill',
            title: '‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
            message: `‡∏ö‡∏¥‡∏•${bill.billType === 'electricity' ? '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü' : '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥'} - ${getStatusText(bill.status)}`,
            status: bill.status,
            createdAt: bill.updatedAt, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status
            isRead: isRead,
            details: {
              billType: bill.billType,
              amount: bill.amount,
              billMonth: bill.month,
              billYear: bill.year,
              dueDate: bill.dueDate,
              image: bill.image
            }
          });
        }
      }
    }

    console.log('üîç Searching for leaves with shopId:', shopId);
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Leave ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏°‡∏µ shopId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    let latestLeaves = [];
    if (shopId && shopId !== 'admin') {
      const leaveQuery = { 
        shopId,
        updatedAt: { $gte: oneMonthAgo } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      };
      latestLeaves = await Leave.find(leaveQuery)
        .sort({ updatedAt: -1 })
        .limit(10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    }
    
    console.log('üìã Found leaves:', latestLeaves.length);
    console.log('üìã Leave IDs:', latestLeaves.map(l => l._id));
    for (const leave of latestLeaves) {
      console.log('üìã Leave:', {
        id: leave._id,
        status: leave.status,
        issue: leave.issue,
        updatedAt: leave.updatedAt
      });
      if (leave.status && leave.status !== 'pending') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ leave ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á shopId ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (leave.shopId && leave.shopId.toString() === shopId.toString()) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const isRead = userReadStatus.readLeaves.includes(leave._id.toString());
          
          notifications.push({
            _id: `leave_${leave._id}`,
            type: 'leave',
            title: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤',
            message: `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ - ${getStatusText(leave.status)}`,
            status: leave.status,
            createdAt: leave.updatedAt, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status
            isRead: isRead,
            details: {
              startDate: leave.startDate,
              endDate: leave.endDate,
              issue: leave.issue
            }
          });
        }
      }
    }

    console.log('üîç Searching for repairs with shopId:', shopId);
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Repair ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏°‡∏µ shopId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    let latestRepairs = [];
    if (shopId && shopId !== 'admin') {
      const repairQuery = { 
        shopId,
        updatedAt: { $gte: oneMonthAgo } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      };
      latestRepairs = await Repair.find(repairQuery)
        .sort({ updatedAt: -1 })
        .limit(10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    }
    
    console.log('üìã Found repairs:', latestRepairs.length);
    console.log('üìã Repair IDs:', latestRepairs.map(r => r._id));
    for (const repair of latestRepairs) {
      console.log('üìã Repair:', {
        id: repair._id,
        status: repair.status,
        category: repair.category,
        updatedAt: repair.updatedAt
      });
      if (repair.status && repair.status !== 'pending') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ repair ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á shopId ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (repair.shopId && repair.shopId.toString() === shopId.toString()) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const isRead = userReadStatus.readRepairs.includes(repair._id.toString());
          
          notifications.push({
            _id: `repair_${repair._id}`,
            type: 'repair',
            title: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°',
            message: `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° - ${getStatusText(repair.status)}`,
            status: repair.status,
            createdAt: repair.updatedAt, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status
            isRead: isRead,
            details: {
              category: repair.category,
              issue: repair.issue,
              reportDate: repair.report_date
            }
          });
        }
      }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Monthly Ranking notifications ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏°‡∏µ shopId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    console.log('üîç Searching for monthly ranking notifications with shopId:', shopId);
    let latestMonthlyRankingNotifications = [];
    if (shopId && shopId !== 'admin') {
      const monthlyRankingQuery = { 
        shopId, 
        type: 'monthly_ranking',
        createdAt: { $gte: oneMonthAgo } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      };
      latestMonthlyRankingNotifications = await Notification.find(monthlyRankingQuery)
        .sort({ isRead: 1, createdAt: -1 }) // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô, ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
        .limit(10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ranking Evaluation notifications ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏°‡∏µ shopId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    console.log('üîç Searching for ranking evaluation notifications with shopId:', shopId);
    let latestRankingEvaluationNotifications = [];
    if (shopId && shopId !== 'admin') {
      const rankingEvaluationQuery = { 
        shopId, 
        type: 'ranking_evaluation',
        createdAt: { $gte: oneMonthAgo } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      };
      latestRankingEvaluationNotifications = await Notification.find(rankingEvaluationQuery)
        .sort({ isRead: 1, createdAt: -1 }) // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô, ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
        .limit(10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    }
    
    console.log('üìã Found monthly ranking notifications:', latestMonthlyRankingNotifications.length);
    for (const monthlyRankingNotification of latestMonthlyRankingNotifications) {
      console.log('üìã Monthly ranking notification:', {
        id: monthlyRankingNotification._id,
        message: monthlyRankingNotification.message,
        createdAt: monthlyRankingNotification.createdAt,
        isRead: monthlyRankingNotification.isRead
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ monthly ranking notification ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á shopId ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (monthlyRankingNotification.shopId && 
          monthlyRankingNotification.shopId.toString() === shopId.toString()) {
        notifications.push({
          _id: `monthly_ranking_${monthlyRankingNotification._id}`,
          type: 'monthly_ranking',
          title: monthlyRankingNotification.title,
          message: monthlyRankingNotification.message,
          status: monthlyRankingNotification.status,
          createdAt: monthlyRankingNotification.createdAt,
          isRead: monthlyRankingNotification.isRead,
          details: {
            monthlyRankingData: monthlyRankingNotification.monthlyRankingData
          }
        });
      }
    }
    
    console.log('üìã Found ranking evaluation notifications:', latestRankingEvaluationNotifications.length);
    for (const rankingEvaluationNotification of latestRankingEvaluationNotifications) {
      console.log('üìã Ranking evaluation notification:', {
        id: rankingEvaluationNotification._id,
        message: rankingEvaluationNotification.message,
        createdAt: rankingEvaluationNotification.createdAt,
        isRead: rankingEvaluationNotification.isRead
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ ranking evaluation notification ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á shopId ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (rankingEvaluationNotification.shopId && 
          rankingEvaluationNotification.shopId.toString() === shopId.toString()) {
        notifications.push({
          _id: `ranking_evaluation_${rankingEvaluationNotification._id}`,
          type: 'ranking_evaluation',
          title: rankingEvaluationNotification.title,
          message: rankingEvaluationNotification.message,
          status: rankingEvaluationNotification.status,
          createdAt: rankingEvaluationNotification.createdAt,
          isRead: rankingEvaluationNotification.isRead,
          details: {
            rankingEvaluationData: rankingEvaluationNotification.rankingEvaluationData
          }
        });
      }
    }

    // ‡∏î‡∏∂‡∏á admin notifications ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ admin ‡πÄ‡∏≠‡∏á)
    if (req.user.role !== 'admin') {
      console.log('üîç Fetching admin notifications for shopId:', shopId);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin notifications ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö shopId ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      let adminNotifications = [];
      if (shopId && shopId !== 'admin') {
        const adminNotificationQuery = {
          type: 'admin_notification',
          createdAt: { $gte: oneMonthAgo }, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
          $or: [
            { recipients: 'all' },
            { recipients: 'active' },
            { recipients: 'expired' },
            { recipientShopId: shopId }
          ]
        };
        
        adminNotifications = await Notification.find(adminNotificationQuery)
          .sort({ isRead: 1, createdAt: -1 }) // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô, ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
          .limit(15); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
      }
      // ‡∏ñ‡πâ‡∏≤ user ‡πÑ‡∏°‡πà‡∏°‡∏µ shopId ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô admin ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á admin notifications

      console.log('üìã Found admin notifications:', adminNotifications.length);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° admin notifications ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö shopId ‡∏ô‡∏µ‡πâ)
      for (const adminNotification of adminNotifications) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ notification ‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö shopId ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let shouldShow = false;
        
        if (adminNotification.recipients === 'all' || 
            adminNotification.recipients === 'active' || 
            adminNotification.recipients === 'expired') {
          shouldShow = true;
        } else if (adminNotification.recipientShopId && 
                   adminNotification.recipientShopId.toString() === shopId.toString()) {
          shouldShow = true;
        }
        
        if (shouldShow) {
          notifications.push({
            _id: `admin_${adminNotification._id}`,
            type: 'admin_notification',
            title: adminNotification.title,
            message: adminNotification.message,
            status: 'new',
            createdAt: adminNotification.createdAt,
            isRead: adminNotification.isRead || false,
            priority: adminNotification.priority,
            sentBy: adminNotification.sentBy,
            details: {
              priority: adminNotification.priority,
              sentBy: adminNotification.sentBy,
              adminNotificationData: {
                priority: adminNotification.priority,
                sentBy: adminNotification.sentBy,
                sentAt: adminNotification.sentAt
              }
            }
          });
        }
      }
    } else {
      console.log('üîç Admin user - skipping admin notifications');
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô, ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    notifications.sort((a, b) => {
      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å‡∏≠‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      if (a.isRead !== b.isRead) {
        return a.isRead ? 1 : -1; // false (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô) ‡∏à‡∏∞‡πÑ‡∏î‡πâ -1, true (‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß) ‡∏à‡∏∞‡πÑ‡∏î‡πâ 1
      }
      
      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const dateA = new Date(a.createdAt)
      const dateB = new Date(b.createdAt)
      return dateB - dateA // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    });

    console.log('üìã Total notifications found (filtered by shopId and date):', notifications.length);
    console.log('üìã ShopId being filtered:', shopId);
    console.log('üìã Date filter (from):', oneMonthAgo.toISOString());
    console.log('üìã Notifications (sorted by date, newest first):', notifications.map(n => ({ 
      type: n.type, 
      status: n.status, 
      message: n.message, 
      isRead: n.isRead,
      createdAt: n.createdAt,
      updatedTime: new Date(n.createdAt).toLocaleString('th-TH')
    })));

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notification ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô popup (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    const limitedNotifications = notifications.slice(0, 20);
    
    console.log('üìã Final notifications to display:', limitedNotifications.length);

    res.status(200).json({
      success: true,
      data: limitedNotifications,
      meta: {
        total: notifications.length,
        displayed: limitedNotifications.length,
        dateFilter: oneMonthAgo.toISOString(),
        shopId: shopId
      }
    });
  } catch (error) {
    console.error('‚ùå Error getting user notifications:', error);
    
    // ‡∏™‡πà‡∏á error ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: 'Data validation error',
        details: error.message
      });
    }
    
    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        error: 'Invalid data format',
        details: error.message
      });
    }
    
    if (error.name === 'MongoError' || error.name === 'MongoServerError') {
      return res.status(500).json({
        success: false,
        error: 'Database error',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
    
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// Mark notification as read
export const markNotificationAsRead = async (req, res) => {
  try {
    const { id } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin notification ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (id.startsWith('admin_')) {
      const adminNotificationId = id.replace('admin_', '');
      
      const adminNotification = await Notification.findById(adminNotificationId);
      if (!adminNotification) {
        return res.status(404).json({
          success: false,
          error: 'Admin notification not found'
        });
      }

      adminNotification.isRead = true;
      await adminNotification.save();

      console.log('‚úÖ Admin notification marked as read:', adminNotificationId);

      res.status(200).json({
        success: true,
        data: adminNotification
      });
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notification ‡∏õ‡∏Å‡∏ï‡∏¥
      const notification = await Notification.findById(id);
      if (!notification) {
        return res.status(404).json({
          success: false,
          error: 'Notification not found'
        });
      }

      // Check if user owns this notification
      if (notification.userId.toString() !== req.user.shopId.toString()) {
        return res.status(403).json({
          success: false,
          error: 'Unauthorized'
        });
      }

      notification.isRead = true;
      await notification.save();

      res.status(200).json({
        success: true,
        data: notification
      });
    }
  } catch (error) {
    console.error('Error marking notification as read:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// Mark all notifications as read
export const markAllNotificationsAsRead = async (req, res) => {
  try {
    const userId = req.user.userId;
    const shopId = req.user.shopId;

    console.log('üîç Marking all notifications as read for user:', userId);

    // ‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á user read status
    let userReadStatus = await UserReadStatus.findOne({ userId });
    if (!userReadStatus) {
      userReadStatus = new UserReadStatus({ userId, shopId });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
    const bills = await Bill.find({ 
      shopId, 
      status: { $ne: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' } 
    });
    
    const leaves = await Leave.find({ 
      shopId, 
      status: { $ne: 'pending' } 
    });
    
    const repairs = await Repair.find({ 
      shopId, 
      status: { $ne: 'pending' } 
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    bills.forEach(bill => {
      if (!userReadStatus.readBills.includes(bill._id.toString())) {
        userReadStatus.readBills.push(bill._id.toString());
      }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    leaves.forEach(leave => {
      if (!userReadStatus.readLeaves.includes(leave._id.toString())) {
        userReadStatus.readLeaves.push(leave._id.toString());
      }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    repairs.forEach(repair => {
      if (!userReadStatus.readRepairs.includes(repair._id.toString())) {
        userReadStatus.readRepairs.push(repair._id.toString());
      }
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    userReadStatus.lastReadAt = new Date();
    
    await userReadStatus.save();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï admin notifications ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô isRead = true
    if (shopId) {
      await Notification.updateMany(
        {
          type: 'admin_notification',
          $or: [
            { recipients: 'all' },
            { recipients: 'active' },
            { recipients: 'expired' },
            { recipientShopId: shopId }
          ]
        },
        { $set: { isRead: true } }
      );
      console.log('‚úÖ Admin notifications marked as read for shopId:', shopId);
    }

    console.log('‚úÖ All notifications marked as read');
    console.log('üìä Read status updated:', {
      readBills: userReadStatus.readBills.length,
      readLeaves: userReadStatus.readLeaves.length,
      readRepairs: userReadStatus.readRepairs.length
    });

    res.status(200).json({
      success: true,
      message: 'All notifications marked as read',
      data: {
        readBills: userReadStatus.readBills.length,
        readLeaves: userReadStatus.readLeaves.length,
        readRepairs: userReadStatus.readRepairs.length
      }
    });
  } catch (error) {
    console.error('Error marking all notifications as read:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
};

// Create notification (called by other controllers)
export const createNotification = async (userId, shopId, type, title, message, status, relatedId, billType = null) => {
  try {
    const notification = new Notification({
      userId,
      shopId,
      type,
      title,
      message,
      status,
      relatedId,
      billType
    });

    await notification.save();
    console.log(`‚úÖ Notification created: ${type} - ${status}`);
    try {
      if (shopId) emitToShop(shopId, 'user:notification:new', { type, title, message, status, relatedId });
    } catch (_) {}
    return notification;
  } catch (error) {
    console.error('Error creating notification:', error);
    throw error;
  }
};

// Create bill notification
export const createBillNotification = async (bill, status) => {
  try {
    const title = '‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£';
    const billTypeText = bill.billType === 'electricity' ? '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü' : '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥';
    const message = `‡∏ö‡∏¥‡∏•${billTypeText} - ${getStatusText(status)}`;
    
    await createNotification(
      bill.shopId, // userId (using shopId for now)
      bill.shopId,
      'bill',
      title,
      message,
      status,
      bill._id,
      bill.billType
    );
    
    console.log(`‚úÖ Bill notification created: ${billTypeText} - ${status}`);
  } catch (error) {
    console.error('Error creating bill notification:', error);
  }
};

// Create leave notification
export const createLeaveNotification = async (leave, status) => {
  try {
    const title = '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤';
    const message = `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ - ${getStatusText(status)}`;
    
    await createNotification(
      leave.userId,
      leave.shopId,
      'leave',
      title,
      message,
      status,
      leave._id
    );
  } catch (error) {
    console.error('Error creating leave notification:', error);
  }
};

// Create repair notification
export const createRepairNotification = async (repair, status) => {
  try {
    const title = '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°';
    const message = `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° - ${getStatusText(status)}`;
    
    await createNotification(
      repair.userId,
      repair.shopId,
      'repair',
      title,
      message,
      status,
      repair._id
    );
  } catch (error) {
    console.error('Error creating repair notification:', error);
  }
};

// Create ranking evaluation notification
export const createRankingEvaluationNotification = async (evaluation, evaluatorName) => {
  try {
    const title = '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ranking';
    const message = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${evaluation.evaluationMonth}/${evaluation.evaluationYear} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Ranking ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const allEvaluations = await Evaluation.find({
      canteenName: evaluation.canteenName,
      evaluationMonth: evaluation.evaluationMonth,
      evaluationYear: evaluation.evaluationYear,
      isActive: true
    }).sort({ totalScore: -1 });
    
    const rank = allEvaluations.findIndex(evalItem => evalItem.shopId.toString() === evaluation.shopId.toString()) + 1;
    
    const notification = new Notification({
      userId: evaluation.shopId, // ‡πÉ‡∏ä‡πâ shopId ‡πÄ‡∏õ‡πá‡∏ô userId
      shopId: evaluation.shopId,
      type: 'ranking_evaluation',
      title: title,
      message: message,
      status: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      relatedId: evaluation._id,
      rankingEvaluationData: {
        revenue: evaluation.revenue || 0,
        score: evaluation.totalScore || 0,
        rank: rank,
        canteenName: evaluation.canteenName,
        evaluationMonth: evaluation.evaluationMonth,
        evaluationYear: evaluation.evaluationYear,
        evaluatedBy: evaluatorName || 'Admin',
        evaluatedAt: evaluation.evaluatedAt || new Date()
      }
    });

    await notification.save();
    console.log(`‚úÖ Ranking evaluation notification created for shop ${evaluation.shopName}: Score ${evaluation.totalScore}, Rank ${rank}`);
    
    // ‡∏™‡πà‡∏á socket notification ‡πÉ‡∏´‡πâ user
    try {
      if (evaluation.shopId) {
        emitToShop(evaluation.shopId, 'user:notification:new', { 
          type: 'ranking_evaluation', 
          title: title, 
          message: message, 
          status: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß', 
          relatedId: evaluation._id 
        });
        console.log(`üîî Socket notification sent for ranking evaluation to shop ${evaluation.shopId}`);
      }
    } catch (socketError) {
      console.error('Error sending socket notification:', socketError);
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ notification ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    }
    
    return notification;
  } catch (error) {
    console.error('Error creating ranking evaluation notification:', error);
    throw error;
  }
};

// Helper function to get status text
const getStatusText = (status) => {
  const statusMap = {
    'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    'approved': '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
    'rejected': '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß',
    '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö': '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    '‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î': '‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
  };
  return statusMap[status] || status;
}; 