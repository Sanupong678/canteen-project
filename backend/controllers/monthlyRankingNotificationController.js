import mongoose from 'mongoose';
import Notification from '../models/notificationModel.js';
import Evaluation from '../models/Evaluation.js';
import MoneyHistory from '../models/moneyHistoryModel.js';
import Shop from '../models/Shop.js';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Monthly Ranking Notification
export const checkAndCreateMonthlyRankingNotification = async (req, res) => {
  try {
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();
    
    console.log(`üîç Checking monthly ranking notification for ${currentMonth}/${currentYear}`);
    
    // ‡∏î‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    const activeShops = await Shop.find({
      contractEndDate: { $gte: currentDate },
      'credentials.status': 'active'
    });
    
    console.log(`üìä Found ${activeShops.length} active shops`);
    
    const results = {
      totalShops: activeShops.length,
      notificationsCreated: 0,
      notificationsSkipped: 0,
      errors: []
    };
    
    for (const shop of activeShops) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const existingNotification = await Notification.findOne({
          shopId: shop._id,
          type: 'monthly_ranking',
          'monthlyRankingData.month': currentMonth,
          'monthlyRankingData.year': currentYear
        });
        
        if (existingNotification) {
          console.log(`‚è≠Ô∏è Notification already exists for shop ${shop.name} in ${currentMonth}/${currentYear}`);
          results.notificationsSkipped++;
          continue;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏™‡πà‡∏ß‡∏ô
        const hasCompleteData = await checkCompleteRankingData(shop._id, currentMonth, currentYear);
        
        if (hasCompleteData.isComplete) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification
          const notification = await createMonthlyRankingNotification(shop, hasCompleteData.data, currentMonth, currentYear);
          console.log(`‚úÖ Created monthly ranking notification for shop ${shop.name}`);
          results.notificationsCreated++;
        } else {
          console.log(`‚ùå Incomplete data for shop ${shop.name}: ${hasCompleteData.missing.join(', ')}`);
        }
        
      } catch (error) {
        console.error(`‚ùå Error processing shop ${shop.name}:`, error);
        results.errors.push({
          shopId: shop._id,
          shopName: shop.name,
          error: error.message
        });
      }
    }
    
    res.json({
      success: true,
      message: `Monthly ranking notification check completed for ${currentMonth}/${currentYear}`,
      results
    });
    
  } catch (error) {
    console.error('‚ùå Error in checkAndCreateMonthlyRankingNotification:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á monthly ranking notification',
      error: error.message
    });
  }
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö 3 ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const checkCompleteRankingData = async (shopId, month, year) => {
  const missing = [];
  const data = {};
  
  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (MoneyHistory)
    const moneyHistory = await MoneyHistory.findOne({
      shopId: shopId,
      month: month,
      year: year
    });
    
    if (!moneyHistory || moneyHistory.totals === 0) {
      missing.push('‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
    } else {
      data.revenue = moneyHistory.totals;
      data.revenueUpdatedAt = moneyHistory.updatedAt;
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (Evaluation)
    const evaluation = await Evaluation.findOne({
      shopId: shopId,
      evaluationMonth: month,
      evaluationYear: year,
      isActive: true,
      evaluationSent: true
    });
    
    if (!evaluation || evaluation.totalScore === undefined) {
      missing.push('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô');
    } else {
      data.score = evaluation.totalScore;
      data.finalStatus = evaluation.finalStatus;
      data.evaluatedAt = evaluation.evaluatedAt;
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö Ranking (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Evaluation)
    if (evaluation) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      const allEvaluations = await Evaluation.find({
        canteenName: evaluation.canteenName,
        evaluationMonth: month,
        evaluationYear: year,
        isActive: true,
        evaluationSent: true
      }).sort({ totalScore: -1 });
      
      const rank = allEvaluations.findIndex(evalItem => 
        evalItem.shopId.toString() === shopId.toString()
      ) + 1;
      
      if (rank > 0) {
        data.rank = rank;
        data.totalShopsInCanteen = allEvaluations.length;
      } else {
        missing.push('‡∏•‡∏≥‡∏î‡∏±‡∏ö Ranking');
      }
    } else {
      missing.push('‡∏•‡∏≥‡∏î‡∏±‡∏ö Ranking');
    }
    
    return {
      isComplete: missing.length === 0,
      missing,
      data
    };
    
  } catch (error) {
    console.error('‚ùå Error checking complete ranking data:', error);
    return {
      isComplete: false,
      missing: ['‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'],
      data: {}
    };
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Monthly Ranking Notification
const createMonthlyRankingNotification = async (shop, rankingData, month, year) => {
  const monthNames = [
    '', '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  const monthName = monthNames[month];
  const title = '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ranking';
  const message = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${monthName} ${year} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Ranking ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`;
  
  const notification = new Notification({
    userId: shop._id,
    shopId: shop._id,
    type: 'monthly_ranking',
    title: title,
    message: message,
    status: '‡πÉ‡∏´‡∏°‡πà',
    monthlyRankingData: {
      month: month,
      year: year,
      monthName: monthName,
      revenue: rankingData.revenue,
      score: rankingData.score,
      rank: rankingData.rank,
      finalStatus: rankingData.finalStatus,
      totalShopsInCanteen: rankingData.totalShopsInCanteen,
      revenueUpdatedAt: rankingData.revenueUpdatedAt,
      evaluatedAt: rankingData.evaluatedAt
    }
  });
  
  await notification.save();
  return notification;
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞
export const checkShopRankingStatus = async (req, res) => {
  try {
    const { shopId } = req.params;
    const { month, year } = req.query;
    
    const currentDate = new Date();
    const checkMonth = month ? parseInt(month) : currentDate.getMonth() + 1;
    const checkYear = year ? parseInt(year) : currentDate.getFullYear();
    
    console.log(`üîç Checking ranking status for shop ${shopId} in ${checkMonth}/${checkYear}`);
    
    const shop = await Shop.findById(shopId);
    if (!shop) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏™‡πà‡∏ß‡∏ô
    const rankingStatus = await checkCompleteRankingData(shopId, checkMonth, checkYear);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ notification ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingNotification = await Notification.findOne({
      shopId: shopId,
      type: 'monthly_ranking',
      'monthlyRankingData.month': checkMonth,
      'monthlyRankingData.year': checkYear
    });
    
    res.json({
      success: true,
      data: {
        shopId: shop._id,
        shopName: shop.name,
        month: checkMonth,
        year: checkYear,
        isComplete: rankingStatus.isComplete,
        missing: rankingStatus.missing,
        rankingData: rankingStatus.data,
        hasNotification: !!existingNotification,
        notificationId: existingNotification?._id
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error in checkShopRankingStatus:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ranking',
      error: error.message
    });
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (manual trigger)
export const createShopMonthlyNotification = async (req, res) => {
  try {
    const { shopId } = req.params;
    const { month, year } = req.body;
    
    const currentDate = new Date();
    const targetMonth = month || currentDate.getMonth() + 1;
    const targetYear = year || currentDate.getFullYear();
    
    console.log(`üîç Creating monthly notification for shop ${shopId} in ${targetMonth}/${targetYear}`);
    
    const shop = await Shop.findById(shopId);
    if (!shop) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ notification ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingNotification = await Notification.findOne({
      shopId: shopId,
      type: 'monthly_ranking',
      'monthlyRankingData.month': targetMonth,
      'monthlyRankingData.year': targetYear
    });
    
    if (existingNotification) {
      return res.status(400).json({
        success: false,
        message: `‡∏°‡∏µ notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${targetMonth}/${targetYear} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏™‡πà‡∏ß‡∏ô
    const rankingStatus = await checkCompleteRankingData(shopId, targetMonth, targetYear);
    
    if (!rankingStatus.isComplete) {
      return res.status(400).json({
        success: false,
        message: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: ${rankingStatus.missing.join(', ')}`,
        missing: rankingStatus.missing
      });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification
    const notification = await createMonthlyRankingNotification(shop, rankingStatus.data, targetMonth, targetYear);
    
    res.json({
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á monthly ranking notification ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        notificationId: notification._id,
        shopName: shop.name,
        month: targetMonth,
        year: targetYear,
        rankingData: rankingStatus.data
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error in createShopMonthlyNotification:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á monthly ranking notification',
      error: error.message
    });
  }
};
