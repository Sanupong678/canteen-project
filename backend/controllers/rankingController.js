import Ranking from '../models/rankingModel.js';
import Canteen from '../models/canteenModel.js';
import Evaluation from '../models/Evaluation.js';
import Shop from '../models/Shop.js';
import multer from 'multer';
import xlsx from 'xlsx';
import path from 'path';
import fs from 'fs';

// Get all rankings with filters
const getRankings = async (req, res) => {
  try {
    const { canteenId, search, status } = req.query;
    
    let query = {};
    
    // Filter by canteen
    if (canteenId) {
      query.canteenId = canteenId;
    }
    
    // Filter by search term
    if (search) {
      query.shopName = { $regex: search, $options: 'i' };
    }
    
    // Filter by status
    if (status) {
      if (status === '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' || status === '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£') {
        query.overallStatus = status;
      } else if (status === '‡∏ú‡πà‡∏≤‡∏ô' || status === '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô') {
        query.evaluationStatus = status;
      }
    }
    
    const rankings = await Ranking.find(query)
      .sort({ revenue: -1, createdAt: -1 })
      .populate('canteenId', 'name');
    
    // Transform data for frontend
    const transformedRankings = rankings.map(ranking => ({
      _id: ranking._id,
      shopName: ranking.shopName,
      canteenId: ranking.canteenId._id,
      canteenName: ranking.canteenName,
      revenue: ranking.revenue,
      evaluationStatus: ranking.evaluationStatus,
      overallStatus: ranking.overallStatus,
      notes: ranking.notes,
      evaluationDate: ranking.evaluationDate,
      evaluatorName: ranking.evaluatorName,
      createdAt: ranking.createdAt,
      updatedAt: ranking.updatedAt
    }));
    
    res.json({
      success: true,
      data: transformedRankings
    });
  } catch (error) {
    console.error('Error getting rankings:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking'
    });
  }
};

// Get ranking statistics
const getRankingStats = async (req, res) => {
  try {
    const { canteenId } = req.query;
    
    let matchQuery = {};
    if (canteenId) {
      matchQuery.canteenId = canteenId;
    }
    
    const stats = await Ranking.aggregate([
      { $match: matchQuery },
      {
        $group: {
          _id: null,
          totalRevenue: { $sum: '$revenue' },
          averageRevenue: { $avg: '$revenue' },
          totalShops: { $sum: 1 },
          passedEvaluation: {
            $sum: { $cond: [{ $eq: ['$evaluationStatus', '‡∏ú‡πà‡∏≤‡∏ô'] }, 1, 0] }
          }
        }
      }
    ]);
    
    const result = stats[0] || {
      totalRevenue: 0,
      averageRevenue: 0,
      totalShops: 0,
      passedEvaluation: 0
    };
    
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    console.error('Error getting ranking stats:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
    });
  }
};

// Get current month data for user ranking (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Evaluation)
const getCurrentRankingData = async (req, res) => {
  try {
    const { shopId } = req.query;
    
    if (!shopId) {
      return res.status(400).json({
        success: false,
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ shopId'
      });
    }
    
    console.log('üîç Getting current ranking data from Evaluation for shopId:', shopId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1; // 1-12
    const currentYear = currentDate.getFullYear();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• evaluation ‡∏Ç‡∏≠‡∏á shop ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const evaluation = await Evaluation.findOne({
      shopId: shopId,
      evaluationMonth: currentMonth,
      evaluationYear: currentYear,
      isActive: true
    });
    
    console.log('üìä Current evaluation found:', !!evaluation);
    
    if (!evaluation) {
      return res.json({
        success: true,
        data: {
          money: 0,
          score: 0,
          rank: 0
        }
      });
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    // ‡πÉ‡∏ä‡πâ canteenId ‡∏à‡∏≤‡∏Å Shop ‡πÅ‡∏ó‡∏ô canteenName ‡∏à‡∏≤‡∏Å Evaluation
    const shop = await Shop.findById(shopId);
    const canteenId = shop?.canteenId;
    
    console.log('üè™ Shop canteenId:', canteenId);
    console.log('üìä Evaluation canteenName:', evaluation.canteenName);
    
    // ‡∏´‡∏≤ evaluations ‡πÉ‡∏ô canteen ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ canteenId ‡∏à‡∏≤‡∏Å Shop
    const allEvaluations = await Evaluation.find({
      evaluationMonth: currentMonth,
      evaluationYear: currentYear,
      isActive: true,
      evaluationSent: true
    }).populate('shopId', 'canteenId').sort({ totalScore: -1 });
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ evaluations ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô canteen ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const sameCanteenEvaluations = allEvaluations.filter(evaluation => 
      evaluation.shopId && evaluation.shopId.canteenId === canteenId
    );
    
    console.log('üìä All evaluations for ranking:', allEvaluations.length);
    console.log('üìä Same canteen evaluations:', sameCanteenEvaluations.length);
    console.log('üìä Same canteen evaluations data:', sameCanteenEvaluations.map(evaluation => ({
      shopId: evaluation.shopId._id.toString(),
      canteenId: evaluation.shopId.canteenId,
      totalScore: evaluation.totalScore,
      evaluationSent: evaluation.evaluationSent
    })));
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allShopEvaluations = await Evaluation.find({
      shopId,
      isActive: true,
      evaluationSent: true,
      totalScore: { $exists: true, $ne: null }
    }).sort({ evaluationYear: -1, evaluationMonth: -1 });
    
    console.log('üìä All shop evaluations for average:', allShopEvaluations.length);
    
    let currentShopAverageScore = 0;
    if (allShopEvaluations.length > 0) {
      const totalScore = allShopEvaluations.reduce((sum, evaluation) => sum + (evaluation.totalScore || 0), 0);
      currentShopAverageScore = Math.round((totalScore / allShopEvaluations.length) * 100) / 100; // ‡∏£‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    }
    
    console.log('üìä Current shop average score calculated:', currentShopAverageScore);
    console.log('üìä Total evaluations used:', allShopEvaluations.length);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô canteen ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const allShopsInCanteen = await Shop.find({ canteenId }).select('_id');
    const shopIdsInCanteen = allShopsInCanteen.map(shop => shop._id);
    
    console.log('üìä All shops in canteen:', shopIdsInCanteen.length);
    
    const shopsWithAverageScores = [];
    
    for (const shopIdInCanteen of shopIdsInCanteen) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô
      const shopEvaluations = await Evaluation.find({
        shopId: shopIdInCanteen,
        isActive: true,
        evaluationSent: true,
        totalScore: { $exists: true, $ne: null }
      });
      
      if (shopEvaluations.length > 0) {
        const totalScore = shopEvaluations.reduce((sum, evaluation) => sum + (evaluation.totalScore || 0), 0);
        const averageScore = Math.round((totalScore / shopEvaluations.length) * 100) / 100;
        
        shopsWithAverageScores.push({
          shopId: shopIdInCanteen,
          averageScore: averageScore,
          evaluationCount: shopEvaluations.length
        });
      }
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    shopsWithAverageScores.sort((a, b) => b.averageScore - a.averageScore);
    
    console.log('üìä Shops with average scores:', shopsWithAverageScores.map(shop => ({
      shopId: shop.shopId.toString(),
      averageScore: shop.averageScore,
      evaluationCount: shop.evaluationCount
    })));
    
    // ‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    const rank = shopsWithAverageScores.findIndex(shop => shop.shopId.toString() === shopId) + 1;
    
    console.log('üìä Calculated rank based on average score:', rank);
    console.log('üìä Target shopId:', shopId);
    console.log('üìä Target shop average score:', currentShopAverageScore);
    
    const currentData = {
      money: evaluation.revenue || 0,
      score: currentShopAverageScore, // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      rank: rank // ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    };
    
    console.log('‚úÖ Current ranking data:', currentData);
    
    res.json({
      success: true,
      data: currentData
    });
  } catch (error) {
    console.error('Error getting current ranking data:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
    });
  }
};

// Get monthly history for user ranking (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Evaluation)
const getMonthlyHistory = async (req, res) => {
  try {
    const { shopId } = req.query;
    
    if (!shopId) {
      return res.status(400).json({
        success: false,
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ shopId'
      });
    }
    
    console.log('üîç Getting monthly history from Evaluation for shopId:', shopId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• evaluation history
    const evaluationHistory = await Evaluation.find({ 
      shopId,
      isActive: true 
    })
      .sort({ evaluationYear: -1, evaluationMonth: -1 })
      .limit(12); // Get last 12 months
    
    console.log('üìä Evaluation history records:', evaluationHistory.length);
    
    // Calculate ranks for each month
    const monthlyHistory = [];
    
    for (const evaluation of evaluationHistory) {
      // Get all evaluations for this month to calculate rank
      const monthEvaluations = await Evaluation.find({
        evaluationYear: evaluation.evaluationYear,
        evaluationMonth: evaluation.evaluationMonth,
        isActive: true
      }).sort({ totalScore: -1 }); // Sort by score descending
      
      // Find rank of current shop
      const rank = monthEvaluations.findIndex(evalItem => 
        evalItem.shopId.toString() === shopId
      ) + 1;
      
      const historyItem = {
        year: evaluation.evaluationYear,
        month: evaluation.evaluationMonth,
        revenue: evaluation.revenue || 0,
        score: evaluation.totalScore,
        rank: rank,
        finalStatus: evaluation.finalStatus,
        evaluatedAt: evaluation.evaluatedAt,
        updatedAt: evaluation.updatedAt
      };
      
      monthlyHistory.push(historyItem);
    }
    
    // Sort by year and month descending
    monthlyHistory.sort((a, b) => {
      if (a.year !== b.year) return b.year - a.year;
      return b.month - a.month;
    });
    
    console.log('üìà Monthly history records:', monthlyHistory.length);
    
    res.json({
      success: true,
      data: monthlyHistory
    });
    
  } catch (error) {
    console.error('Error getting monthly history:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
    });
  }
};

// Create new ranking
const createRanking = async (req, res) => {
  try {
    const { shopName, canteenId, canteenName, revenue, evaluationStatus, overallStatus, notes } = req.body;
    
    const ranking = new Ranking({
      shopName,
      canteenId,
      canteenName,
      revenue: revenue || 0,
      evaluationStatus: evaluationStatus || '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô',
      overallStatus: overallStatus || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      notes: notes || ''
    });
    
    await ranking.save();
    
    res.status(201).json({
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: ranking
    });
  } catch (error) {
    console.error('Error creating ranking:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking'
    });
  }
};

// Update ranking
const updateRanking = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    
    const ranking = await Ranking.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );
    
    if (!ranking) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking'
      });
    }
    
    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: ranking
    });
  } catch (error) {
    console.error('Error updating ranking:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking'
    });
  }
};

// Delete ranking
const deleteRanking = async (req, res) => {
  try {
    const { id } = req.params;
    
    const ranking = await Ranking.findByIdAndDelete(id);
    
    if (!ranking) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking'
      });
    }
    
    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    console.error('Error deleting ranking:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ranking'
    });
  }
};

// Upload Excel file
const uploadExcel = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel'
      });
    }
    
    const filePath = req.file.path;
    console.log('üìÅ Processing Excel file:', filePath);
    
    // Read Excel file
    const workbook = xlsx.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = xlsx.utils.sheet_to_json(worksheet);
    
    console.log('üìä Excel data rows:', data.length);
    
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    for (const row of data) {
      try {
        const { shopName, canteenName, revenue, evaluationStatus, overallStatus, notes } = row;
        
        if (!shopName || !canteenName) {
          errors.push(`‡πÅ‡∏ñ‡∏ß ${successCount + errorCount + 1}: ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shopName ‡∏´‡∏£‡∏∑‡∏≠ canteenName`);
          errorCount++;
          continue;
        }
        
        // Check if ranking already exists
        const existingRanking = await Ranking.findOne({ shopName, canteenName });
        
        if (existingRanking) {
          // Update existing ranking
          await Ranking.findByIdAndUpdate(existingRanking._id, {
            revenue: revenue || 0,
            evaluationStatus: evaluationStatus || '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô',
            overallStatus: overallStatus || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            notes: notes || ''
          });
        } else {
          // Create new ranking
          const ranking = new Ranking({
            shopName,
            canteenName,
            revenue: revenue || 0,
            evaluationStatus: evaluationStatus || '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô',
            overallStatus: overallStatus || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            notes: notes || ''
          });
          
          await ranking.save();
        }
        
        successCount++;
      } catch (error) {
        console.error('Error processing row:', error);
        errors.push(`‡πÅ‡∏ñ‡∏ß ${successCount + errorCount + 1}: ${error.message}`);
        errorCount++;
      }
    }
    
    // Clean up uploaded file
    try {
      fs.unlinkSync(filePath);
    } catch (cleanupError) {
      console.error('Error cleaning up file:', cleanupError);
    }
    
    res.json({
      success: true,
      message: `‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      data: {
        totalRows: data.length,
        successCount,
        errorCount,
        errors: errors.length > 0 ? errors : undefined
      }
    });
    
  } catch (error) {
    console.error('Error uploading Excel:', error);
    
    // Clean up uploaded file
    if (req.file) {
      try {
        fs.unlinkSync(req.file.path);
      } catch (cleanupError) {
        console.error('Error cleaning up file:', cleanupError);
      }
    }
    
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel'
    });
  }
};

export {
  getRankings,
  getRankingStats,
  getCurrentRankingData,
  getMonthlyHistory,
  createRanking,
  updateRanking,
  deleteRanking,
  uploadExcel
};