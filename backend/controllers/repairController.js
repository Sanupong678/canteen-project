import Repair from '../models/repairModel.js';
import Shop from '../models/Shop.js';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import mongoose from 'mongoose';
import { createRepairNotification } from './notificationController.js';
import { createAdminRepairNotification } from './adminNotificationController.js';
import { emitToShop, emitToAdmin } from '../socket.js';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads/repairs ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
const uploadDir = path.join(process.cwd(), 'uploads', 'repairs');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// Configure multer for image upload
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: function (req, file, cb) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed!'), false);
    }
  }
});

// Get all repairs (admin)
export const getRepairs = async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const repairs = await Repair.find().sort({ createdAt: -1 });

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const repairsWithDetails = await Promise.all(repairs.map(async (repair) => {
      const shop = await Shop.findById(repair.shopId);
      return {
        ...repair.toObject(),
        shopName: shop ? shop.name : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
        canteen: shop ? `‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£${getCanteenName(shop.canteenId)}` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
      };
    }));

    res.json({ data: repairsWithDetails });
  } catch (error) {
    console.error('Error fetching repairs:', error);
    res.status(500).json({ message: error.message });
  }
};

// Helper function to get canteen name
function getCanteenName(canteenId) {
  const canteenMap = {
    1: 'C5',
    2: 'D1',
    3: 'Dormitory',
    4: 'E1',
    5: 'E2',
    6: 'Epark',
    7: 'Msquare',
    8: 'Ruemrim',
    9: 'S2'
  };
  return canteenMap[canteenId] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
}

// Get user's repairs
export const getUserRepairs = async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á userId ‡πÅ‡∏•‡∏∞ shopId ‡∏à‡∏≤‡∏Å token
    const userId = req.user.userId;
    const shopId = req.user.shopId;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ userId ‡πÅ‡∏•‡∏∞ shopId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!userId || !shopId) {
      console.log('User has no userId or shopId:', { userId, shopId });
      return res.json({ 
        data: [],
        message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô',
        hasHistory: false
      });
    }

    const repairs = await Repair.find({ userId }).sort({ createdAt: -1 });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
    if (repairs.length === 0) {
      return res.json({ 
        data: [],
        message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô',
        hasHistory: false
      });
    }

    res.json({ 
      data: repairs,
      hasHistory: true
    });
  } catch (error) {
    console.error('Error fetching user repairs:', error);
    res.status(500).json({ message: error.message });
  }
};

// Create new repair
export const createRepair = async (req, res) => {
  try {
    console.log('=== REPAIR CREATE DEBUG ===');
    console.log('Token data:', req.user);
    console.log('Request body:', req.body);
    console.log('Request files:', req.files);
    console.log('Request headers:', req.headers);
    console.log('==========================');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å token
    const userId = req.user.userId;
    const shopId = req.user.shopId;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ userId ‡πÅ‡∏•‡∏∞ shopId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!userId || !shopId) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà user ‡∏Å‡∏£‡∏≠‡∏Å
    const category = req.body.category;
    const issue = req.body.issue;

    console.log('Extracted data:', { category, issue });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!category || !issue) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
      });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    const imagePaths = [];
    if (req.files && req.files.length > 0) {
      req.files.forEach(file => {
        imagePaths.push(file.path);
      });
    }

    console.log('Image paths:', imagePaths);

    const newRepair = new Repair({
      userId,
      shopId,
      category,
      issue,
      status: 'pending',
      report_date: new Date(),
      imagePaths: imagePaths // ‡πÄ‡∏Å‡πá‡∏ö path ‡πÅ‡∏ó‡∏ô Base64
    });

    console.log('Attempting to save repair:', newRepair);

    const savedRepair = await newRepair.save();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const shop = await Shop.findById(shopId);
    const repairWithDetails = {
      ...savedRepair.toObject(),
      shopName: shop ? shop.name : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
      canteen: shop ? `‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£${getCanteenName(shop.canteenId)}` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
    };

    console.log('Successfully saved repair:', repairWithDetails);
    
    res.status(201).json({
      success: true,
      data: repairWithDetails
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
    try {
      await createAdminRepairNotification(savedRepair, req.user);
      console.log('‚úÖ Admin repair notification created');
      emitToAdmin('admin:repair:new', { repairId: savedRepair._id, shopId });
    } catch (notificationError) {
      console.error('‚ùå Error creating admin repair notification:', notificationError);
    }
  } catch (error) {
    console.error('Detailed error:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(400).json({
      success: false,
      message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    });
  }
};

// Update repair status
export const updateRepairStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  
  console.log('üîç Update repair status request:', { id, status, body: req.body });
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ repair ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const repair = await Repair.findById(id);
    if (!repair) {
      console.log('‚ùå Repair not found:', id);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ô‡∏µ‡πâ' });
    }

    console.log('üìã Repair before update:', {
      id: repair._id,
      shopId: repair.shopId,
      status: repair.status,
      category: repair.category
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    repair.status = status;
    await repair.save();

    console.log('‚úÖ Repair updated successfully:', {
      id: repair._id,
      shopId: repair.shopId,
      status: repair.status,
      category: repair.category
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user
    try {
      await createRepairNotification(repair, status);
      console.log('‚úÖ Repair notification created');
      emitToShop(repair.shopId, 'user:repair:updated', { repairId: repair._id, status: repair.status });
    } catch (notificationError) {
      console.error('‚ùå Error creating repair notification:', notificationError);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const shop = await Shop.findById(repair.shopId);
    const repairWithDetails = {
      ...repair.toObject(),
      shopName: shop ? shop.name : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
      canteen: shop ? `‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£${getCanteenName(shop.canteenId)}` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
    };
    
    res.json(repairWithDetails);
  } catch (error) {
    console.error('‚ùå Error updating repair status:', error);
    res.status(400).json({ message: error.message });
  }
};

// Delete repair
export const deleteRepair = async (req, res) => {
  const { id } = req.params;
  try {
    const deletedRepair = await Repair.findByIdAndDelete(id);
    if (!deletedRepair) {
      return res.status(404).json({ message: 'Repair not found' });
    }
    res.json({ message: 'Repair deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}; 

// Get repair image
export const getRepairImage = async (req, res) => {
  try {
    const { repairId, imageIndex } = req.params;
    
    const repair = await Repair.findById(repairId);
    if (!repair) {
      return res.status(404).send('Repair not found');
    }

    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
    // (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)

    const imagePaths = repair.imagePaths || [];
    const imageIndexNum = parseInt(imageIndex);
    
    if (imageIndexNum < 0 || imageIndexNum >= imagePaths.length) {
      return res.status(404).send('Image not found');
    }

    const imagePath = imagePaths[imageIndexNum];
    
    if (!fs.existsSync(imagePath)) {
      console.log('Image file not found:', imagePath);
      return res.status(404).send('Image file not found');
    }

    // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö error ‡∏Ç‡∏≠‡∏á stream
    const ext = path.extname(imagePath).toLowerCase();
    let contentType = 'image/jpeg';
    if (ext === '.png') contentType = 'image/png';
    else if (ext === '.gif') contentType = 'image/gif';
    else if (ext === '.webp') contentType = 'image/webp';
    res.set('Content-Type', contentType);

    const stream = fs.createReadStream(imagePath);
    stream.on('error', (err) => {
      console.error('‚ùå Stream error while sending repair image:', err);
      if (!res.headersSent) {
        res.status(500).send('Error streaming image');
      } else {
        try { res.end(); } catch (_) {}
      }
    });
    stream.pipe(res);
    
  } catch (error) {
    console.error('Error getting repair image:', error);
    res.status(500).send('Error loading image');
  }
}; 