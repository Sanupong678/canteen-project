import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Shop from '../models/Shop.js';
import Canteen from '../models/canteenModel.js';

dotenv.config();

// Mapping ‡∏Ç‡∏≠‡∏á canteenId ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
const canteenMapping = {
  1: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ C5',
  2: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ D1', 
  3: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Dormity',
  4: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ E1',
  5: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ E2',
  6: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Epark',
  7: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Msquare',
  8: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ RuemRim',
  9: '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ S2'
};

const updateShopCanteenIds = async () => {
  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    console.log('üîç Checking and creating canteens...');
    for (const [canteenId, canteenName] of Object.entries(canteenMapping)) {
      let canteen = await Canteen.findOne({ name: canteenName });
      
      if (!canteen) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        canteen = new Canteen({
          name: canteenName,
          type: 'canteen',
          path: `/admin/canteen/${canteenName.toLowerCase().replace(/‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ /g, '')}`,
          image: '/images/default-canteen.png'
        });
        await canteen.save();
        console.log(`‚úÖ Created canteen: ${canteenName} (ID: ${canteen._id})`);
      } else {
        console.log(`‚ÑπÔ∏è  Canteen already exists: ${canteenName} (ID: ${canteen._id})`);
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ canteenId
    console.log('üîç Updating shops without canteenId...');
    
    // ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allShops = await Shop.find({});
    console.log(`üìä Found ${allShops.length} total shops`);

    let updatedCount = 0;
    let skippedCount = 0;

    for (const shop of allShops) {
      // ‡∏ñ‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ canteenId ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
      if (shop.canteenId) {
        console.log(`‚è≠Ô∏è  Shop "${shop.name}" already has canteenId: ${shop.canteenId}`);
        skippedCount++;
        continue;
      }

      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏´‡∏ô
      let assignedCanteenId = null;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
      const shopName = shop.name.toLowerCase();
      
      if (shopName.includes('c5') || shopName.includes('‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ c5')) {
        assignedCanteenId = 1;
      } else if (shopName.includes('d1') || shopName.includes('‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ d1')) {
        assignedCanteenId = 2;
      } else if (shopName.includes('dormity') || shopName.includes('dorm')) {
        assignedCanteenId = 3;
      } else if (shopName.includes('e1') || shopName.includes('‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ e1')) {
        assignedCanteenId = 4;
      } else if (shopName.includes('e2') || shopName.includes('‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ e2')) {
        assignedCanteenId = 5;
      } else if (shopName.includes('epark')) {
        assignedCanteenId = 6;
      } else if (shopName.includes('msquare') || shopName.includes('m-square')) {
        assignedCanteenId = 7;
      } else if (shopName.includes('ruemrim') || shopName.includes('ruem-rim')) {
        assignedCanteenId = 8;
      } else if (shopName.includes('s2') || shopName.includes('‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ s2')) {
        assignedCanteenId = 9;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (C5)
      if (!assignedCanteenId) {
        assignedCanteenId = 1;
        console.log(`‚ö†Ô∏è  Could not determine canteen for shop "${shop.name}", assigning to C5 (ID: 1)`);
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
      shop.canteenId = assignedCanteenId;
      await shop.save();
      
      const canteenName = canteenMapping[assignedCanteenId];
      console.log(`‚úÖ Updated shop "${shop.name}" -> ${canteenName} (ID: ${assignedCanteenId})`);
      updatedCount++;
    }

    console.log('\nüìä Update Summary:');
    console.log(`- Total shops: ${allShops.length}`);
    console.log(`- Updated shops: ${updatedCount}`);
    console.log(`- Skipped shops: ${skippedCount}`);
    console.log(`- Shops without canteenId: ${allShops.length - skippedCount}`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    console.log('\nüè¢ Shops by Canteen:');
    for (const [canteenId, canteenName] of Object.entries(canteenMapping)) {
      const shopCount = await Shop.countDocuments({ canteenId: parseInt(canteenId) });
      console.log(`- ${canteenName}: ${shopCount} shops`);
    }

    console.log('\nüéâ Shop canteenId update completed successfully!');

  } catch (error) {
    console.error('‚ùå Error updating shop canteenIds:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
};

// ‡∏£‡∏±‡∏ô script
updateShopCanteenIds(); 