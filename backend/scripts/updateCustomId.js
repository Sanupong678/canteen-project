import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Shop from '../models/shopModel.js';
import Canteen from '../models/canteenModel.js';
import Bill from '../models/billModel.js';
import connectDB from '../config/database.js';

// Load environment variables
dotenv.config();

// Mapping table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
const canteenAbbreviations = {
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ C5': 'C5',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ D1': 'D1', 
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Dormity': 'D',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ E1': 'E1',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ E2': 'E2',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Epark': 'EP',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ Msquare': 'MQ',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ RuemRim': 'RRN',
  '‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ S2': 'S2'
};

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á customId ‡πÉ‡∏´‡∏°‡πà
function generateNewCustomId(canteenName, existingCustomIds) {
  // ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const abbreviation = canteenAbbreviations[canteenName];
  
  if (!abbreviation) {
    console.log(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${canteenName}`);
    return null; // ‡∏´‡∏£‡∏∑‡∏≠ throw error
  }
  
  // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  let nextNumber = 1;
  const pattern = new RegExp(`^${abbreviation}(\\d{3})$`);
  
  // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  const existingNumbers = existingCustomIds
    .filter(id => pattern.test(id))
    .map(id => parseInt(id.match(pattern)[1]))
    .sort((a, b) => b - a);
  
  if (existingNumbers.length > 0) {
    nextNumber = existingNumbers[0] + 1;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á customId ‡πÉ‡∏´‡∏°‡πà (3 ‡∏´‡∏•‡∏±‡∏Å)
  return `${abbreviation}${nextNumber.toString().padStart(3, '0')}`;
}

// Function ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customId
async function updateCustomIds() {
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customId...');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await connectDB();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const canteens = await Canteen.find();
    console.log(`üìã ‡∏û‡∏ö‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${canteens.length} ‡πÅ‡∏´‡πà‡∏á`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏Ç‡∏≠‡∏á canteenId ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    const canteenMap = {};
    canteens.forEach(canteen => {
      canteenMap[canteen.canteenId] = canteen.name;
    });
    
    console.log('üè¢ Mapping ‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£:', canteenMap);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const shops = await Shop.find();
    console.log(`üè™ ‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ${shops.length} ‡∏£‡πâ‡∏≤‡∏ô`);
    
    // ‡πÄ‡∏Å‡πá‡∏ö customId ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    const existingCustomIds = shops.map(shop => shop.customId);
    
    let updatedCount = 0;
    let skippedCount = 0;
    
    for (const shop of shops) {
      const canteenName = canteenMap[shop.canteenId];
      
      if (!canteenName) {
        console.log(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô ${shop.name} (canteenId: ${shop.canteenId})`);
        skippedCount++;
        continue;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á customId ‡πÉ‡∏´‡∏°‡πà
      const newCustomId = generateNewCustomId(canteenName, existingCustomIds);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ customId ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!newCustomId) {
        console.log(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á customId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô ${shop.name} (‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${canteenName})`);
        skippedCount++;
        continue;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ customId ‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (existingCustomIds.includes(newCustomId)) {
        console.log(`‚ö†Ô∏è  customId ${newCustomId} ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
        skippedCount++;
        continue;
      }
      
      console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô: ${shop.name}`);
      console.log(`   ‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${canteenName}`);
      console.log(`   customId ‡πÄ‡∏Å‡πà‡∏≤: ${shop.customId}`);
      console.log(`   customId ‡πÉ‡∏´‡∏°‡πà: ${newCustomId}`);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customId ‡πÉ‡∏ô Shop
      await Shop.findByIdAndUpdate(shop._id, { customId: newCustomId });
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customId ‡πÉ‡∏ô Bill ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      await Bill.updateMany(
        { shopId: shop._id },
        { shopCustomId: newCustomId }
      );
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï existingCustomIds ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
      const oldIndex = existingCustomIds.indexOf(shop.customId);
      if (oldIndex !== -1) {
        existingCustomIds[oldIndex] = newCustomId;
      } else {
        existingCustomIds.push(newCustomId);
      }
      
      updatedCount++;
      console.log(`   ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n`);
    }
    
    console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:`);
    console.log(`   - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updatedCount} ‡∏£‡πâ‡∏≤‡∏ô`);
    console.log(`   - ‡∏Ç‡πâ‡∏≤‡∏°: ${skippedCount} ‡∏£‡πâ‡∏≤‡∏ô`);
    console.log(`   - ‡∏£‡∏ß‡∏°: ${shops.length} ‡∏£‡πâ‡∏≤‡∏ô`);
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database');
  }
}

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á customId ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
async function previewCustomIds() {
  try {
    console.log('üîç ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á customId ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á...');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await connectDB();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const canteens = await Canteen.find();
    const canteenMap = {};
    canteens.forEach(canteen => {
      canteenMap[canteen.canteenId] = canteen.name;
    });
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const shops = await Shop.find();
    const existingCustomIds = shops.map(shop => shop.customId);
    
    console.log('\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á customId ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    console.log('='.repeat(80));
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    const shopsByCanteen = {};
    shops.forEach(shop => {
      const canteenName = canteenMap[shop.canteenId];
      if (!shopsByCanteen[canteenName]) {
        shopsByCanteen[canteenName] = [];
      }
      shopsByCanteen[canteenName].push(shop);
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    Object.keys(shopsByCanteen).forEach(canteenName => {
      if (!canteenName) return;
      
      console.log(`\nüè¢ ‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${canteenName}`);
      console.log(`   ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠: ${canteenAbbreviations[canteenName] || '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô: ${shopsByCanteen[canteenName].length} ‡∏£‡πâ‡∏≤‡∏ô`);
      console.log('   ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:');
      
      shopsByCanteen[canteenName].forEach((shop, index) => {
        const newCustomId = generateNewCustomId(canteenName, existingCustomIds);
        
        if (newCustomId) {
          existingCustomIds.push(newCustomId); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
          
          console.log(`     ${index + 1}. ${shop.name}`);
          console.log(`        ‡πÄ‡∏Å‡πà‡∏≤: ${shop.customId} ‚Üí ‡πÉ‡∏´‡∏°‡πà: ${newCustomId}`);
        } else {
          console.log(`     ${index + 1}. ${shop.name}`);
          console.log(`        ‡πÄ‡∏Å‡πà‡∏≤: ${shop.customId} ‚Üí ‡πÉ‡∏´‡∏°‡πà: ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ`);
        }
      });
    });
    
    console.log('\n' + '='.repeat(80));
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database');
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö command line arguments
const args = process.argv.slice(2);
const command = args[0];

if (command === 'preview') {
  previewCustomIds();
} else if (command === 'update') {
  updateCustomIds();
} else {
  console.log('üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('   node updateCustomId.js preview  - ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á customId ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á');
  console.log('   node updateCustomId.js update   - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï customId ‡∏à‡∏£‡∏¥‡∏á');
  console.log('\n‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á update ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database');
}
