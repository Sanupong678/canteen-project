import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Evaluation from '../models/Evaluation.js';
import EvaluationItem from '../models/EvaluationItem.js';
import connectDB from '../config/database.js';

// Load environment variables
dotenv.config();

async function debugEvaluationItems() {
  try {
    console.log('üîç Debug evaluation items...');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await connectDB();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• evaluation items ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const evaluationItems = await EvaluationItem.find().sort({ order: 1 });
    console.log(`üìã ‡∏û‡∏ö evaluation items ${evaluationItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• evaluations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const evaluations = await Evaluation.find();
    console.log(`üìä ‡∏û‡∏ö evaluations ${evaluations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö evaluation ‡πÅ‡∏£‡∏Å
    if (evaluations.length > 0) {
      const firstEvaluation = evaluations[0];
      console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö evaluation ‡πÅ‡∏£‡∏Å:');
      console.log(`ID: ${firstEvaluation._id}`);
      console.log(`Items count: ${firstEvaluation.items.length}`);
      
      console.log('\nüìã Items ‡πÉ‡∏ô evaluation ‡πÅ‡∏£‡∏Å:');
      firstEvaluation.items.forEach((item, index) => {
        console.log(`${index + 1}. ${item.title}`);
        console.log(`   ID: ${item.id}`);
        console.log(`   Order: ${item.order || 'undefined'}`);
        console.log(`   Max Score: ${item.maxScore}`);
        console.log('---');
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö evaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ items ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const evaluationWithMostItems = evaluations.reduce((max, current) => 
      current.items.length > max.items.length ? current : max
    );
    
    if (evaluationWithMostItems) {
      console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö evaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ items ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:');
      console.log(`ID: ${evaluationWithMostItems._id}`);
      console.log(`Items count: ${evaluationWithMostItems.items.length}`);
      
      console.log('\nüìã Items ‡πÉ‡∏ô evaluation ‡∏ô‡∏µ‡πâ:');
      evaluationWithMostItems.items.forEach((item, index) => {
        console.log(`${index + 1}. ${item.title}`);
        console.log(`   ID: ${item.id}`);
        console.log(`   Order: ${item.order || 'undefined'}`);
        console.log(`   Max Score: ${item.maxScore}`);
        console.log('---');
      });
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database');
  }
}

debugEvaluationItems();

