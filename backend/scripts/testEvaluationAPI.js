import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Evaluation from '../models/Evaluation.js';
import connectDB from '../config/database.js';

// Load environment variables
dotenv.config();

async function testEvaluationAPI() {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Evaluation API...');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await connectDB();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• evaluation ‡πÅ‡∏£‡∏Å
    const evaluation = await Evaluation.findOne();
    
    if (!evaluation) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• evaluation');
      return;
    }
    
    console.log(`üìä ‡∏û‡∏ö evaluation: ${evaluation._id}`);
    console.log(`üè™ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: ${evaluation.shopName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö items ‡∏ï‡∏≤‡∏° order (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô API)
    const sortedItems = (evaluation.items || []).sort((a, b) => (a.order || 0) - (b.order || 0));
    
    console.log('\nüìã Items ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß:');
    sortedItems.forEach((item, index) => {
      console.log(`${index + 1}. ${item.title}`);
      console.log(`   Order: ${item.order || 'undefined'}`);
      console.log(`   Max Score: ${item.maxScore}`);
      console.log('---');
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• response ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô API
    const transformedEvaluation = {
      _id: evaluation._id,
      shopId: evaluation.shopId,
      customId: evaluation.shopId?.customId,
      shopName: evaluation.shopId?.name,
      canteenName: `‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${evaluation.shopId?.canteenId}`,
      type: evaluation.shopId?.type,
      revenue: evaluation.revenue || 0,
      items: sortedItems,
      totalScore: evaluation.totalScore || 0,
      finalStatus: evaluation.finalStatus || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      evaluationMonth: evaluation.evaluationMonth,
      evaluationYear: evaluation.evaluationYear,
      evaluationRound: evaluation.evaluationRound,
      evaluatedAt: evaluation.evaluatedAt,
      updatedAt: evaluation.updatedAt
    };
    
    console.log('\nüì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà API ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö:');
    console.log(JSON.stringify(transformedEvaluation, null, 2));
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database');
  }
}

testEvaluationAPI();
